'use strict';

const { SlashCommandBuilder } = require('@discordjs/builders'),
  Call = require('../../handler/Call.js'),
  MarketplacePost = require('../../util/post.js'),
  timers = require('../../load/timers.js');

function findFunc(o, type) { return o.id === type.toLowerCase() || (o.aliases?.includes(type.toLowerCase())); }

const OPTIONS = [
  {
    id: 'prompt',
    aliases: ['prompts'],
    name: 'your active prompts',
    desc: 'Cancels a prompt such as one generated by the post command.',
    exec: (call) => {
      const prompts = Call.prompts.filter((p) => p.user.id === call.user.id);

      prompts.forEach((p) => p.end('cancelled'));

      return prompts.length > 0;
    }
  },
  {
    id: 'pagination',
    aliases: ['paged', 'pages', 'page', 'paginations'],
    name: 'all of your active paginated embeds',
    desc: 'Cancels all active pagination embeds.',
    exec: (call) => {
      for (const pagination of call.client.paginations.filter((p) => p.user.id === call.user.id).values())
        pagination.end();

      return call.client.paginations.every((p) => p.user.id !== call.user.id);
    }
  },
  {
    id: 'post',
    aliases: ['marketplace'],
    name: 'your current post',
    desc: 'Cancels your current pending marketplace post.',
    exec: (call) => {
      const post = MarketplacePost.pendingList.find((post) => post.info.status === 'pending' && post.info.authorId === call.user.id);

      if (post) {
        post.info.status = 'closed';
        timers.delete(timers.list.find((t) => t.type === 'post' && t.info.userId === call.user.id)?.time);
      }

      return !!post;
    }
  }
];

module.exports = {
  useAnywhere: false,
  data: new SlashCommandBuilder()
    .setName('cancel')
    .setDescription('Cancels the provided object.')
    .addStringOption((option) =>
      option.setName('object')
        .setDescription('The currency to convert.')
        .setRequired(true)
        .addChoices(...OPTIONS.map((o) => ({ name: o.id, value: o.id })))),
  exec: (call) => {
    const type = OPTIONS.find((o) => findFunc(o, call.interaction.options.getString('object'))),
      success = type.exec(call);

    call.interaction.reply({ content: success ?
      `Successfully cancelled ${type.name}.` :
      `Failed to cancel ${type.name}.`, ephemeral: true });
  }
};
